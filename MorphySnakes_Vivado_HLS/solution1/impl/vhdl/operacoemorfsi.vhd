-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity operacoemorfsi is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pixel : IN STD_LOGIC_VECTOR (7 downto 0);
    up : IN STD_LOGIC_VECTOR (7 downto 0);
    down : IN STD_LOGIC_VECTOR (7 downto 0);
    left_r : IN STD_LOGIC_VECTOR (7 downto 0);
    right_r : IN STD_LOGIC_VECTOR (7 downto 0);
    upright : IN STD_LOGIC_VECTOR (7 downto 0);
    upleft : IN STD_LOGIC_VECTOR (7 downto 0);
    downright : IN STD_LOGIC_VECTOR (7 downto 0);
    downleft : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of operacoemorfsi is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal l_fu_234_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_reg_300 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_i_fu_80_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i_fu_94_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i1_fu_74_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_c_i_fu_86_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_c_i_fu_100_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_i3_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i5_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i2_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_c_i4_fu_128_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_c_i6_fu_142_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_i9_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i1_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i8_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_c_i1_fu_170_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_c_i1_fu_184_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_fu_108_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_fu_150_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_fu_192_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_i_i_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_i_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_c_i_i_fu_212_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_c_i_i_fu_226_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_i1_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i2_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i3_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_c_i2_fu_253_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_c_i2_fu_266_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_fu_273_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal e_fu_286_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_preg <= e_fu_286_p3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                l_reg_300 <= l_fu_234_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    a_c_i1_fu_170_p3 <= 
        downleft when (tmp_1_i9_fu_164_p2(0) = '1') else 
        upright;
    a_c_i2_fu_253_p3 <= 
        upleft when (tmp_1_i1_fu_247_p2(0) = '1') else 
        downright;
    a_c_i4_fu_128_p3 <= 
        left_r when (tmp_1_i3_fu_122_p2(0) = '1') else 
        right_r;
    a_c_i_fu_86_p3 <= 
        up when (tmp_1_i_fu_80_p2(0) = '1') else 
        down;
    a_c_i_i_fu_212_p3 <= 
        a_fu_108_p3 when (tmp_3_i_i_fu_206_p2(0) = '1') else 
        c_fu_192_p3;
    a_fu_108_p3 <= 
        a_c_i_fu_86_p3 when (tmp_i1_fu_74_p2(0) = '1') else 
        b_c_i_fu_100_p3;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, e_fu_286_p3, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return <= e_fu_286_p3;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    b_c_i1_fu_184_p3 <= 
        pixel when (tmp_2_i1_fu_178_p2(0) = '1') else 
        upright;
    b_c_i2_fu_266_p3 <= 
        pixel when (tmp_2_i2_fu_261_p2(0) = '1') else 
        downright;
    b_c_i6_fu_142_p3 <= 
        pixel when (tmp_2_i5_fu_136_p2(0) = '1') else 
        right_r;
    b_c_i_fu_100_p3 <= 
        pixel when (tmp_2_i_fu_94_p2(0) = '1') else 
        down;
    b_c_i_i_fu_226_p3 <= 
        b_fu_150_p3 when (tmp_4_i_i_fu_220_p2(0) = '1') else 
        c_fu_192_p3;
    b_fu_150_p3 <= 
        a_c_i4_fu_128_p3 when (tmp_i2_fu_116_p2(0) = '1') else 
        b_c_i6_fu_142_p3;
    c_fu_192_p3 <= 
        a_c_i1_fu_170_p3 when (tmp_i8_fu_158_p2(0) = '1') else 
        b_c_i1_fu_184_p3;
    d_fu_273_p3 <= 
        a_c_i2_fu_253_p3 when (tmp_i3_fu_242_p2(0) = '1') else 
        b_c_i2_fu_266_p3;
    e_fu_286_p3 <= 
        d_fu_273_p3 when (tmp_i_fu_281_p2(0) = '1') else 
        l_reg_300;
    l_fu_234_p3 <= 
        a_c_i_i_fu_212_p3 when (tmp_i_i_fu_200_p2(0) = '1') else 
        b_c_i_i_fu_226_p3;
    tmp_1_i1_fu_247_p2 <= "1" when (unsigned(upleft) < unsigned(downright)) else "0";
    tmp_1_i3_fu_122_p2 <= "1" when (unsigned(left_r) < unsigned(right_r)) else "0";
    tmp_1_i9_fu_164_p2 <= "1" when (unsigned(downleft) < unsigned(upright)) else "0";
    tmp_1_i_fu_80_p2 <= "1" when (unsigned(up) < unsigned(down)) else "0";
    tmp_2_i1_fu_178_p2 <= "1" when (unsigned(pixel) < unsigned(upright)) else "0";
    tmp_2_i2_fu_261_p2 <= "1" when (unsigned(pixel) < unsigned(downright)) else "0";
    tmp_2_i5_fu_136_p2 <= "1" when (unsigned(pixel) < unsigned(right_r)) else "0";
    tmp_2_i_fu_94_p2 <= "1" when (unsigned(pixel) < unsigned(down)) else "0";
    tmp_3_i_i_fu_206_p2 <= "1" when (unsigned(a_fu_108_p3) > unsigned(c_fu_192_p3)) else "0";
    tmp_4_i_i_fu_220_p2 <= "1" when (unsigned(b_fu_150_p3) > unsigned(c_fu_192_p3)) else "0";
    tmp_i1_fu_74_p2 <= "1" when (unsigned(up) < unsigned(pixel)) else "0";
    tmp_i2_fu_116_p2 <= "1" when (unsigned(left_r) < unsigned(pixel)) else "0";
    tmp_i3_fu_242_p2 <= "1" when (unsigned(upleft) < unsigned(pixel)) else "0";
    tmp_i8_fu_158_p2 <= "1" when (unsigned(downleft) < unsigned(pixel)) else "0";
    tmp_i_fu_281_p2 <= "1" when (unsigned(l_reg_300) < unsigned(d_fu_273_p3)) else "0";
    tmp_i_i_fu_200_p2 <= "1" when (unsigned(a_fu_108_p3) > unsigned(b_fu_150_p3)) else "0";
end behav;
