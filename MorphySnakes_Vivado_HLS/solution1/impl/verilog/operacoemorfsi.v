// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module operacoemorfsi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pixel,
        up,
        down,
        left_r,
        right_r,
        upright,
        upleft,
        downright,
        downleft,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] pixel;
input  [7:0] up;
input  [7:0] down;
input  [7:0] left_r;
input  [7:0] right_r;
input  [7:0] upright;
input  [7:0] upleft;
input  [7:0] downright;
input  [7:0] downleft;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] l_fu_234_p3;
reg   [7:0] l_reg_300;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_1_i_fu_80_p2;
wire   [0:0] tmp_2_i_fu_94_p2;
wire   [0:0] tmp_i1_fu_74_p2;
wire   [7:0] a_c_i_fu_86_p3;
wire   [7:0] b_c_i_fu_100_p3;
wire   [0:0] tmp_1_i3_fu_122_p2;
wire   [0:0] tmp_2_i5_fu_136_p2;
wire   [0:0] tmp_i2_fu_116_p2;
wire   [7:0] a_c_i4_fu_128_p3;
wire   [7:0] b_c_i6_fu_142_p3;
wire   [0:0] tmp_1_i9_fu_164_p2;
wire   [0:0] tmp_2_i1_fu_178_p2;
wire   [0:0] tmp_i8_fu_158_p2;
wire   [7:0] a_c_i1_fu_170_p3;
wire   [7:0] b_c_i1_fu_184_p3;
wire   [7:0] a_fu_108_p3;
wire   [7:0] b_fu_150_p3;
wire   [7:0] c_fu_192_p3;
wire   [0:0] tmp_3_i_i_fu_206_p2;
wire   [0:0] tmp_4_i_i_fu_220_p2;
wire   [0:0] tmp_i_i_fu_200_p2;
wire   [7:0] a_c_i_i_fu_212_p3;
wire   [7:0] b_c_i_i_fu_226_p3;
wire   [0:0] tmp_1_i1_fu_247_p2;
wire   [0:0] tmp_2_i2_fu_261_p2;
wire   [0:0] tmp_i3_fu_242_p2;
wire   [7:0] a_c_i2_fu_253_p3;
wire   [7:0] b_c_i2_fu_266_p3;
wire   [7:0] d_fu_273_p3;
wire   [0:0] tmp_i_fu_281_p2;
wire   [7:0] e_fu_286_p3;
reg   [7:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_preg = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_preg <= e_fu_286_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_reg_300 <= l_fu_234_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return = e_fu_286_p3;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_c_i1_fu_170_p3 = ((tmp_1_i9_fu_164_p2[0:0] === 1'b1) ? downleft : upright);

assign a_c_i2_fu_253_p3 = ((tmp_1_i1_fu_247_p2[0:0] === 1'b1) ? upleft : downright);

assign a_c_i4_fu_128_p3 = ((tmp_1_i3_fu_122_p2[0:0] === 1'b1) ? left_r : right_r);

assign a_c_i_fu_86_p3 = ((tmp_1_i_fu_80_p2[0:0] === 1'b1) ? up : down);

assign a_c_i_i_fu_212_p3 = ((tmp_3_i_i_fu_206_p2[0:0] === 1'b1) ? a_fu_108_p3 : c_fu_192_p3);

assign a_fu_108_p3 = ((tmp_i1_fu_74_p2[0:0] === 1'b1) ? a_c_i_fu_86_p3 : b_c_i_fu_100_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign b_c_i1_fu_184_p3 = ((tmp_2_i1_fu_178_p2[0:0] === 1'b1) ? pixel : upright);

assign b_c_i2_fu_266_p3 = ((tmp_2_i2_fu_261_p2[0:0] === 1'b1) ? pixel : downright);

assign b_c_i6_fu_142_p3 = ((tmp_2_i5_fu_136_p2[0:0] === 1'b1) ? pixel : right_r);

assign b_c_i_fu_100_p3 = ((tmp_2_i_fu_94_p2[0:0] === 1'b1) ? pixel : down);

assign b_c_i_i_fu_226_p3 = ((tmp_4_i_i_fu_220_p2[0:0] === 1'b1) ? b_fu_150_p3 : c_fu_192_p3);

assign b_fu_150_p3 = ((tmp_i2_fu_116_p2[0:0] === 1'b1) ? a_c_i4_fu_128_p3 : b_c_i6_fu_142_p3);

assign c_fu_192_p3 = ((tmp_i8_fu_158_p2[0:0] === 1'b1) ? a_c_i1_fu_170_p3 : b_c_i1_fu_184_p3);

assign d_fu_273_p3 = ((tmp_i3_fu_242_p2[0:0] === 1'b1) ? a_c_i2_fu_253_p3 : b_c_i2_fu_266_p3);

assign e_fu_286_p3 = ((tmp_i_fu_281_p2[0:0] === 1'b1) ? d_fu_273_p3 : l_reg_300);

assign l_fu_234_p3 = ((tmp_i_i_fu_200_p2[0:0] === 1'b1) ? a_c_i_i_fu_212_p3 : b_c_i_i_fu_226_p3);

assign tmp_1_i1_fu_247_p2 = ((upleft < downright) ? 1'b1 : 1'b0);

assign tmp_1_i3_fu_122_p2 = ((left_r < right_r) ? 1'b1 : 1'b0);

assign tmp_1_i9_fu_164_p2 = ((downleft < upright) ? 1'b1 : 1'b0);

assign tmp_1_i_fu_80_p2 = ((up < down) ? 1'b1 : 1'b0);

assign tmp_2_i1_fu_178_p2 = ((pixel < upright) ? 1'b1 : 1'b0);

assign tmp_2_i2_fu_261_p2 = ((pixel < downright) ? 1'b1 : 1'b0);

assign tmp_2_i5_fu_136_p2 = ((pixel < right_r) ? 1'b1 : 1'b0);

assign tmp_2_i_fu_94_p2 = ((pixel < down) ? 1'b1 : 1'b0);

assign tmp_3_i_i_fu_206_p2 = ((a_fu_108_p3 > c_fu_192_p3) ? 1'b1 : 1'b0);

assign tmp_4_i_i_fu_220_p2 = ((b_fu_150_p3 > c_fu_192_p3) ? 1'b1 : 1'b0);

assign tmp_i1_fu_74_p2 = ((up < pixel) ? 1'b1 : 1'b0);

assign tmp_i2_fu_116_p2 = ((left_r < pixel) ? 1'b1 : 1'b0);

assign tmp_i3_fu_242_p2 = ((upleft < pixel) ? 1'b1 : 1'b0);

assign tmp_i8_fu_158_p2 = ((downleft < pixel) ? 1'b1 : 1'b0);

assign tmp_i_fu_281_p2 = ((l_reg_300 < d_fu_273_p3) ? 1'b1 : 1'b0);

assign tmp_i_i_fu_200_p2 = ((a_fu_108_p3 > b_fu_150_p3) ? 1'b1 : 1'b0);

endmodule //operacoemorfsi
